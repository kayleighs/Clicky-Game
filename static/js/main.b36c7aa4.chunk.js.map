{"version":3,"sources":["components/Navbar/index.js","components/Footer/index.js","components/Cards/index.js","components/CardWrap/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","id","message","score","highscore","Footer","Cards","onClick","handleClick","alt","name","src","image","CardWrap","children","clickedCards","App","state","images","shuffle","array","i","length","j","Math","floor","random","includes","push","setState","this","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqEA4BeA,MAzBf,SAAgBC,GACd,OAEE,4BAAQC,UAAU,IAChB,yBAAKA,UAAU,sDAAsDC,GAAG,aACtE,wBAAID,UAAU,2BACZ,0BAAMA,UAAU,WAAhB,gBAEF,wBAAIA,UAAU,uBACZ,0BAAMA,UAAU,WAAWD,EAAMG,UAEjC,wBAAIF,UAAU,cAEd,0BAAMA,UAAU,WAAhB,WAAmCD,EAAMI,MAAzC,0CAAmGJ,EAAMK,e,MCFpGC,MAXf,SAAgBN,GACd,OAEE,4BAAQC,UAAU,uBAChB,yBAAKA,UAAU,qBAAf,8B,MCMSM,MAVf,SAAeP,GACb,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBAAgBO,QAAS,kBAAMR,EAAMS,YAAYT,EAAME,MACpE,yBAAKD,UAAU,aAAaS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,W,MCIjDC,MARf,SAAkBd,GAChB,OACE,yBAAKC,UAAU,YACZD,EAAMe,WCKTC,EAAe,GACfb,EAAU,8BACVC,EAAQ,EACRC,EAAY,EAwDDY,E,2MArDbC,MAAQ,CACNC,SACAH,eACAZ,QACAC,YACAF,W,EAGFiB,QAAU,SAAAC,GACR,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,G,EAETZ,YAAc,SAAAP,GACRc,EAAaY,SAAS1B,IACxBE,EAAQ,EACRD,EAAU,sCACVa,EAAe,KAEfA,EAAaa,KAAK3B,GAElBC,EAAU,0BADVC,GAAS,GAEGC,IACVA,EAAYD,EACZD,EAAU,qDAGd,EAAKiB,QAAQD,GACb,EAAKW,SAAS,CAAEX,SAAQf,QAAOC,YAAWF,a,wEAElC,IAAD,OACP,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,CAAQG,MAAOA,EAAOC,UAAWA,EAAWF,QAASA,IACrD,kBAAC,EAAD,KACG4B,KAAKb,MAAMC,OAAOa,IAAI,SAAAb,GAAM,OAC3B,kBAAC,EAAD,CACEc,IAAKd,EAAOjB,GACZW,MAAOM,EAAON,MACdF,KAAMQ,EAAOR,KACbT,GAAIiB,EAAOjB,GACXO,YAAa,EAAKA,iBAIxB,kBAAC,EAAD,W,GAhDUyB,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b36c7aa4.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n\r\n    <header className=\"\">\r\n      <nav className=\"navbar navbar-expand-md h-font navbar-light ks-nav \" id=\"hover-nav\">\r\n        <li className=\"navbar-nav mr-auto py-2\">\r\n          <span className=\"mr-auto\">Clicky-Game</span>\r\n          </li>\r\n        <li className=\"navbar-nav mx-auto \">\r\n          <span className=\"mx-auto\">{props.message}\r\n          </span></li>\r\n          <li className=\"navbar-nav\">\r\n           \r\n          <span className=\"ml-auto\"> Score: {props.score} &nbsp;&nbsp;&nbsp;| &nbsp;&nbsp;&nbsp;High Score: {props.highscore}\r\n          </span>\r\n          </li>\r\n      </nav>\r\n    </header>\r\n\r\n\r\n    \r\n  );\r\n\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n\r\n    <footer className=\"text-center mt-auto\">\r\n      <div className=\"h-font footerText\">Â© 2019 Kayleigh Starr\r\n        </div>\r\n    </footer>\r\n  );\r\n\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Cards(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\" onClick={() => props.handleClick(props.id)}>\r\n        <img className=\"artist-img\" alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction CardWrap(props) {\r\n  return (\r\n    <div className=\"img-wrap\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardWrap","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport images from \"./images.json\"\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Cards from \"./components/Cards\";\nimport CardWrap from \"./components/CardWrap\";\n\n\nlet clickedCards = [];\nlet message = \"Click on an image to begin!\";\nlet score = 0;\nlet highscore = 0;\n\nclass App extends React.Component {\n  state = {\n    images,\n    clickedCards,\n    score,\n    highscore,\n    message\n  };\n//Fisher-Yates shuffle from https://javascript.info/task/shuffle\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n  handleClick = id => {\n    if (clickedCards.includes(id)) {\n      score = 0;\n      message = \"You guessed incorrectly! Game over!\";\n      clickedCards = [];\n    } else {\n      clickedCards.push(id);\n      score += 1;\n      message = \"You guessed correctly!\";\n      if (score > highscore) {\n        highscore = score;\n        message = \"You guessed correctly and beat your high score! \";\n      }\n    }\n    this.shuffle(images);\n    this.setState({ images, score, highscore, message });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar score={score} highscore={highscore} message={message}></Navbar>\n        <CardWrap>\n          {this.state.images.map(images => (\n            <Cards\n              key={images.id}\n              image={images.image}\n              name={images.name}\n              id={images.id}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </CardWrap>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}